"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2594],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates and returns a new remote property of the value `initialValue`.","params":[{"name":"initialValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":67,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"IsA","desc":"Returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":85,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"Get","desc":"Returns the current value set for the remote property.","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":93,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"SetForPlayer","desc":"Sets a value of the remote property for `player` **specifically**, to `value`. ","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":101,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"DestroyForPlayer","desc":"Removes or \\"destroys\\" the value stored for `player` **specifically** in the the remote property.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":120,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"HasPlayerSpecificValueSet","desc":"Returns a boolean indicating if there is a specific value stored for `player` in the remote property.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":146,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"GetForPlayer","desc":"Returns the value stored *specifically* for `player` in the remote property. ","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":164,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"Set","desc":"Sets the value of the remote property to `value`, and so for all other clients (who can access this value through a \\nclient remote property), who don\'t have a specific value for them stored in the remote property.","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":184,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the remote property and renders it unusable.","params":[],"returns":[],"function_type":"method","source":{"line":192,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"Dispatch","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","private":true,"source":{"line":200,"path":"src/Network/Server/RemoteProperty.lua"}}],"properties":[{"name":"Updated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof the remote property is set to a new one. The signal is only passed the new value as the only argument.","lua_type":"Signal <newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":24,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"PlayerValueUpdated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof `player` specifically in the remote property is set to a new one. The signal is passed the player \\nas the first argument, and the new specific value of `player` set in the remote property as the second argument. ","lua_type":"Signal <player: Player, newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":36,"path":"src/Network/Server/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"A remote property in layman\'s terms is simply an  object which can store in some value for \\nall players as well as store in values specific to players. \\n\\n:::note\\n[Argument limitations](https://create.roblox.com/docs/scripting/events/argument-limitations-for-bindables-and-remotes)\\ndo apply since remote functions are internally used by remote properties to store in values and replicate them to clients\\n(which they can access through client remote properties)  respectively.\\n:::","source":{"line":13,"path":"src/Network/Server/RemoteProperty.lua"}}')}}]);