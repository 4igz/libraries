"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4415],{88316:function(n){n.exports=JSON.parse('{"functions":[{"name":"new","desc":"A constructor method which creates a new enum list out of `enumItems`, \\nwith the name of `name`.\\n\\n```lua\\nlocal EnumList = require(...)\\n\\nlocal MyEnumList = EnumList.new(\\"Enums\\", {Test = 123})\\n\\nprint(MyEnumList.Test) --\x3e 123\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"enums","desc":"","lua_type":"{ [string]: { [string]: any } }"}],"returns":[{"desc":"","lua_type":"EnumList"}],"function_type":"static","source":{"line":99,"path":"src/EnumList/init.lua"}},{"name":"is","desc":"A method which returns a boolean indicating if `self` is a enumlist or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":116,"path":"src/EnumList/init.lua"}},{"name":"getName","desc":"Returns the name of the enum list.","params":[],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"method","tags":["EnumList instance"],"source":{"line":126,"path":"src/EnumList/init.lua"}},{"name":"getEnums","desc":"Returns the enums of the enum list.","params":[],"returns":[{"desc":"","lua_type":"{[string]: CustomEnum}"}],"function_type":"method","tags":["EnumList instance"],"source":{"line":137,"path":"src/EnumList/init.lua"}}],"properties":[{"name":"EnumList","desc":" \\n\\nAn exported Luau type of an EnumList object.\\n\\n```lua\\nlocal EnumList = require(...)\\n\\nlocal MyEnumList : EnumList.EnumList = EnumList.new(...) \\n```","lua_type":"Type","tags":["Luau Type"],"readonly":true,"source":{"line":72,"path":"src/EnumList/init.lua"}}],"types":[],"name":"EnumList","desc":" \\n\\nA class for creating enum lists. An enum list in layman\'s terms is simply an object\\nused to store *custom* enums inside.\\n \\n```lua\\nlocal MyEnumList = EnumList.new(\\"EnumList\\", {\\n\\tPhoneNumber = {\\n\\t\\tBabaBoey = 123,\\n\\t}\\n})\\n\\nprint(MyEnumList.PhoneNumber.BabaBoey) --\x3e 123\\n```\\n\\n:::tip Generalization iteration!\\n\\nEnumLists are iterable, e.g:\\n\\n```lua\\nlocal MyEnumList = EnumList.new(\\"EnumList\\", {\\n\\tTest = {Alphabet = \\"A\\"}\\n})\\n\\nfor enumName, enum in MyEnumList do\\n\\tprint(enumName, enum.Alphabet)\\nend\\n\\n--\x3e \\"Test\\" \\"A\\"\\n```\\n:::\\n\\n:::note\\nEnumLists don\'t provide support for deep chained enums (they\'re *not* idiomatic, so you shouldn\'t be having deep chained enums anyways), e.g:\\n\\n```lua\\nlocal EnumList = require(...)\\n\\nlocal MyEnumList = EnumList.new(\\"MyEnumList\\", {\\n\\tEnum = {\\n\\t\\tDeep = {\\n\\t\\t\\tMoreDeep = {\\n\\t\\t\\t\\tLol = 5\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n})\\n\\nprint(MyEnumList.Enum.Deep.MoreDeep.none) --\x3e nil, but won\'t error..\\nprint(MyEnumList.Enum.Deep.lo) --\x3e nil, but won\'t error..\\nprint(MyEnumList.Enum.b) --\x3e will error (not a deep chain!)\\n``` \\n:::","source":{"line":57,"path":"src/EnumList/init.lua"}}')}}]);