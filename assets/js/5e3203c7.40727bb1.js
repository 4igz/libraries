"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4793],{43636:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"A constructor method which creates a new property object, with `initialValue` as the current value\\nof the property.","params":[{"name":"initialValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Property"}],"function_type":"static","source":{"line":56,"path":"src/Property/init.lua"}},{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":67,"path":"src/Property/init.lua"}},{"name":"Set","desc":"Sets the value of the property to `value`, if this new value isn\'t the same as the previous value. ","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["Property Instance"],"source":{"line":77,"path":"src/Property/init.lua"}},{"name":"DeferredSet","desc":"Works exactly the same as [Property.Set], except the updating of the property\'s value to `value` is deferred through [task.defer](https://create.roblox.com/docs/reference/engine/libraries/task#defer).","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["Property Instance"],"source":{"line":92,"path":"src/Property/init.lua"}},{"name":"ForceSet","desc":"Works exactly the same as [Property.Set] except that tables aren\'t checked for equality, e.g:\\n\\n```lua\\nlocal Property = require(...)\\n\\nlocal property = Property.new()\\n\\nproperty.Updated:Connect(function(newVal)\\n\\twarn(newVal) --\x3e {1}\\nend)\\n\\nlocal t = {1}\\nproperty:ForceSet(t) --\x3e Fires off the .Updated signal (expected)\\nproperty:ForceSet(t) --\x3e Fires off the .Updated signal (this ought to not fire off the signal, but the previous and new value aren\'t checked for equality since they\'re both tables)\\n\\nproperty:ForceSet(1) --\x3e Fires off the .Updated signal (expected as a number ~= table)\\nproperty:ForceSet(1) --\x3e DOES NOT fire off the .Updated signal, since the previous value (a number, not a table) and the new value (a number, not a table) are the same!\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["Property Instance"],"source":{"line":126,"path":"src/Property/init.lua"}},{"name":"BulkSet","desc":"Works almost exactly the same as [Property:Set], but never fires off the [Property.Updated] signal.","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["Property Instance"],"source":{"line":141,"path":"src/Property/init.lua"}},{"name":"Get","desc":"Returns the current value of the property.\\n\\n```lua\\nlocal Property = require(...)\\n\\nlocal property = Property.new()\\n\\nproperty:Set(5)\\nprint(property:Get()) --\x3e 5\\n```","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","tags":["Property Instance"],"source":{"line":160,"path":"src/Property/init.lua"}},{"name":"Destroy","desc":"Destroys the property and renders it unusable.","params":[],"returns":[],"function_type":"method","tags":["Property Instance"],"source":{"line":170,"path":"src/Property/init.lua"}}],"properties":[{"name":"Updated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value of the property is \\nset to a new one. The signal is only passed the new value as the only argument.","lua_type":"Signal <newValue: any>","tags":["Signal","Property Instance"],"readonly":true,"source":{"line":30,"path":"src/Property/init.lua"}},{"name":"Property","desc":" \\n\\nAn exported Luau type of a property object.\\n\\n```lua\\nlocal Property = require(...)\\n\\nlocal property: Property.Property = Property.new(...) \\n```","lua_type":"Type","tags":["Luau Type"],"readonly":true,"source":{"line":45,"path":"src/Property/init.lua"}}],"types":[],"name":"Property","desc":" \\n\\nA class for wrapping values around setters and getters. A property in layman\'s terms, is simply a object which contains some value.\\n \\n```lua\\nlocal Property = require(...)\\n\\nlocal property = Property.new(5)\\nprint(property:Get()) --\x3e 5\\n\\nproperty.Updated:Connect(function(newValue)\\n\\tprint(newValue) --\x3e 10\\nend)\\n\\nproperty:Set(10) \\n```","source":{"line":19,"path":"src/Property/init.lua"}}')}}]);