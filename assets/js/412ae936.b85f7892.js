"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2594],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates and returns a new remote property with the value of `initialValue`.","params":[{"name":"initialValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":73,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"is","desc":"Returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":91,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"get","desc":"Returns the current value set for the remote property.","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":101,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"setForClients","desc":"Sets a value of the remote property for every client in `clients` table, *specifically*, to `value`. ","params":[{"name":"clients","desc":"","lua_type":"{ Player }"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":111,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"setForClient","desc":"Sets a value of the remote property for `client` *specifically*, to `value`. ","params":[{"name":"client","desc":"","lua_type":"Player"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":133,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"removeForClient","desc":"Removes the value stored for `client` *specifically* in the the remote property.","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":154,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"removeForClients","desc":"Removes the value of the remote property stored *specifically* for every client in `clients` table.","params":[{"name":"clients","desc":"","lua_type":"{ Player }"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":183,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"clientHasValueSet","desc":"Returns a boolean indicating if there is a specific value stored for `client` \\nin the remote property.","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":206,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"getForClient","desc":"Returns the value stored *specifically* for `client` in the remote property. ","params":[{"name":"client","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":226,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"set","desc":"Sets the value of the remote property to `value`, and so for all other \\nclients (who can access this value through a  client remote property), \\nwho don\'t have a specific value for them stored in the remote property.","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":249,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"destroy","desc":"Destroys the remote property and renders it unusable.","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty instance"],"source":{"line":259,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"dispatch","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","private":true,"source":{"line":267,"path":"src/Network/Server/RemoteProperty.lua"}}],"properties":[{"name":"updated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof the remote property is set to a new one. The signal is only passed the new value as the only argument.","lua_type":"Signal <newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":24,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"clientValueUpdated","desc":" \\n\\nA [signal](https://sleitnick.github.io/RbxUtil/api/Signal/) which is fired whenever the value \\nof `player` specifically in the remote property is set to a new one. The signal is passed the player \\nas the first argument, and the new specific value of `player` set in the remote property as the second argument. ","lua_type":"Signal <player: Player, newValue: any>","tags":["Signal","RemoteProperty Instance"],"readonly":true,"source":{"line":36,"path":"src/Network/Server/RemoteProperty.lua"}},{"name":"RemoteProperty","desc":" \\n\\nAn exported Luau type of a remote property object.","lua_type":"Type","tags":["Luau Type"],"readonly":true,"source":{"line":45,"path":"src/Network/Server/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"A remote property in layman\'s terms is simply an  object which can store in some value for \\nall players as well as store in values specific to players. \\n\\n:::note\\n[Argument limitations](https://create.roblox.com/docs/scripting/events/argument-limitations-for-bindables-and-remotes)\\ndo apply since remote functions are internally used by remote properties to store in values and replicate them to clients\\n(which they can access through client remote properties)  respectively.\\n:::","source":{"line":13,"path":"src/Network/Server/RemoteProperty.lua"}}')}}]);