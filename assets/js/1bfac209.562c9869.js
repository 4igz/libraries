"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5809],{4802:function(t){t.exports=JSON.parse('{"functions":[{"name":"GetMatchingRowsValue","desc":"Searches `matrix` row wise, and returns a value in a row which matches with the rest of the values of that row. E.g:\\n\\n```lua\\nlocal matrix = {\\n\\t{1, 1, 1},\\n\\t{5, 5, 2}, \\n\\t{0, 0, 2},\\n}\\n\\nprint(MatrixUtil.GetMatchingRowsValue(matrix)) --\x3e 1 (The first row is equally matched (all 1s))\\n```\\n\\nAdditionally, you can specify `depth` if you want to control how far the method should check each row. For e.g: \\n\\n```lua\\nlocal matrix = {\\n\\t{1, 2, 3, 4}, \\n\\t{5, 6, 7, 8}, \\n\\t{1, 1, 1, 0}, \\n}\\n\\nprint(MatrixUtil.GetMatchingRowsValue(matrix, 3)) --\x3e 1  (The last row\'s first 3 values (1s) are equally matched)\\nprint(MatrixUtil.GetMatchingRowsValue(matrix, 4)) --\x3e nil  (No row\'s first 4 values are equally matched)\\n```","params":[{"name":"matrix","desc":"","lua_type":"{ { any } }"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","source":{"line":43,"path":"src/MatrixUtil/init.lua"}},{"name":"GetMatchingDiagonalColumnsValue","desc":"Searches `matrix` diagonally, and returns a value which matches with the rest of the values of the arrays in `matrix`. E.g:\\n\\n```lua\\nlocal matrix = {\\n\\t{5, 0, 0},\\n\\t{0, 5, 0},\\n\\t{0, 0, 5},\\n}\\n\\nprint(MatrixUtil.GetMatchingDiagonalColumnsValue(matrix)) --\x3e 1 (A column has matching values diagonally (just 5s))\\n```\\n\\nAdditionally, you can specify `depth` if you want to control how far the method should search `matrix` diagonally. For e.g: \\n\\n```lua\\nlocal matrix = {\\n\\t{2, 0, 0, 0},\\n\\t{0, 2, 0, 0},\\n\\t{0, 0, 2, 0},\\n\\t{0, 0, 0, 0},\\n}\\n\\nprint(MatrixUtil.GetMatchingDiagonalColumnsValue(matrix, 3)) --\x3e 2 (A column has FIRST 3 matching values diagonally (just 2s))\\n```","params":[{"name":"matrix","desc":"","lua_type":"{ { any } }"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","source":{"line":93,"path":"src/MatrixUtil/init.lua"}},{"name":"GetMatchingColumnsValue","desc":"Searches `matrix` column wise and returns a value of a column which matches with the rest of the values of that column. E.g:\\n\\n```lua\\nlocal matrix = {\\n\\t{5, 0, 0},\\n\\t{5, 1, 0},\\n\\t{5, 0, 1},\\n}\\n\\nprint(MatrixUtil.GetMatchingColumnsValue(matrix)) --\x3e 5 (A column has ALL equally matching values (just 5s))\\n```\\n\\nAdditionally, you can specify `depth` if you want to control how far the method should check each column. For e.g: \\n\\n```lua\\nlocal matrix = {\\n\\t{5, 0, 0},\\n\\t{5, 0, 0},\\n\\t{2, 1, 1},\\n}\\n\\nprint(MatrixUtil.GetMatchingColumnsValue(matrix, 2)) --\x3e 5 (A column has FIRST 2 matching values (just 5s))\\n```","params":[{"name":"matrix","desc":"","lua_type":"{ { any } }"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"static","source":{"line":157,"path":"src/MatrixUtil/init.lua"}}],"properties":[],"types":[],"name":"MatrixUtil","desc":"Simple utility module for working with matrixes. A matrix is simply an array consisting of arrays, e.g:\\n\\n```lua\\nlocal matrix = {\\n\\t{1, 1, 2},\\n\\t{1, 1, 1},\\n\\t{3, 3, 3},\\n}\\n```","source":{"line":14,"path":"src/MatrixUtil/init.lua"}}')}}]);