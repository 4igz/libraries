"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5585],{31959:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"A constructor method which creates a new enum list out of `enumItems`, \\nwith the name of `name`.\\n\\n```lua\\nlocal MyEnumList = EnumList.new(\\"Enums\\", {test = 123})\\n\\nprint(MyEnumList.test) --\x3e 123\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"enums","desc":"","lua_type":"{ [string]: { [string]: any } }"}],"returns":[{"desc":"","lua_type":"EnumList"}],"function_type":"static","source":{"line":114,"path":"src/EnumList/init.lua"}},{"name":"is","desc":"A method which returns a boolean indicating if `self` is a enumlist or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":137,"path":"src/EnumList/init.lua"}},{"name":"getEnums","desc":"Returns the enums of the enum list.","params":[],"returns":[{"desc":"","lua_type":"{[string]: CustomEnum}"}],"function_type":"method","tags":["EnumList instance"],"source":{"line":148,"path":"src/EnumList/init.lua"}}],"properties":[{"name":"EnumList","desc":" \\n\\nAn exported Luau type of an EnumList object.\\n\\n```lua\\nlocal MyEnumList : EnumList.EnumList = EnumList.new(...) \\n```","lua_type":"Type","readonly":true,"source":{"line":68,"path":"src/EnumList/init.lua"}},{"name":"name","desc":" \\n\\nThe name of the enum list.\\n\\n```lua\\nlocal MyEnumList = EnumList.new(\\"My\\", {}) \\nprint(MyEnumList.name) --\x3e \\"My\\"\\n```","lua_type":"string","readonly":true,"source":{"line":81,"path":"src/EnumList/init.lua"}}],"types":[],"name":"EnumList","desc":" \\n\\nA class for creating enum lists. An enum list in layman\'s terms is simply an object\\nused to store *custom* enums inside.\\n \\n```lua\\nlocal MyEnumList = EnumList.new(\\"EnumList\\", {\\n\\tphoneNumber = {\\n\\t\\tbabaBoey = 123,\\n\\t}\\n})\\n\\nprint(MyEnumList.phoneNumber.babaBoey) --\x3e 123\\n```\\n\\n:::tip Generalization iteration!\\n\\nEnumLists are iterable, for e.g:\\n\\n```lua\\nlocal MyEnumList = EnumList.new(\\"EnumList\\", {\\n\\ttest = {alphabet = \\"A\\"}\\n})\\n\\nfor enumName, enum in MyEnumList do\\n\\tprint(enumName, enum.alphabet)\\nend\\n\\n--\x3e \\"test\\" \\"A\\"\\n```\\n:::\\n\\n:::warning\\nEnumLists don\'t provide support for deep chained enums (they\'re *not* idiomatic, so you shouldn\'t be having deep chained enums anyways), \\nfor e.g:\\n\\n```lua\\nlocal MyEnumList = EnumList.new(\\"MyEnumList\\", {\\n\\tt = {\\n\\t\\tdeep = {\\n\\t\\t\\tmoreDeep = {\\n\\t\\t\\t\\tb = 5\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n})\\n\\nprint(MyEnumList.t.deep.moreDeep.lol) --\x3e nil, but won\'t error..\\nprint(MyEnumList.t.deep.lo) --\x3e nil, but won\'t error..\\nprint(MyEnumList.t.b) --\x3e will error (as it is not a deep chain!)\\n``` \\n:::","source":{"line":56,"path":"src/EnumList/init.lua"}}')}}]);