"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9695],{17461:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates and returns a new remote signal.","params":[],"returns":[{"desc":"","lua_type":"RemoteSignal"}],"function_type":"static","source":{"line":45,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"is","desc":"Returns a boolean indicating if `self` is a remote signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":59,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"connectOnce","desc":"Works almost exactly the same as [RemoteSignal:connectOnce], except the connection returned \\nis disconnected automaticaly once `callback` is called.","params":[{"name":"callback","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"SignalConnection"}],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":71,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"connect","desc":"Connects `callback` to the remote signal so that it is called whenever the client\\nfires the remote signal, and `callback` will be passed arguments sent by the client.","params":[{"name":"callback","desc":"","lua_type":"(...any) -> ()"}],"returns":[{"desc":"","lua_type":"SignalConnection"}],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":83,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"fireForClients","desc":"Fires the arguments `...` to every client in the `clients` table only.","params":[{"name":"clients","desc":"","lua_type":"{ Player }"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":93,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"fireClient","desc":"Fires the arguments `...` to `client`.","params":[{"name":"client","desc":"","lua_type":"Player"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":105,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"fireAllClients","desc":"Fires the arguments `...` to every client in the game.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":115,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"disconnectAll","desc":"Disconnects all connections connected via [RemoteSignal:connect] or [RemoteSignal:connectOnce].","params":[],"returns":[],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":125,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"destroy","desc":"Destroys the remote signal and renders it unusable.","params":[],"returns":[],"function_type":"method","tags":["RemoteSignal instance"],"source":{"line":135,"path":"src/Network/Server/RemoteSignal.lua"}},{"name":"dispatch","desc":"","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"method","private":true,"source":{"line":143,"path":"src/Network/Server/RemoteSignal.lua"}}],"properties":[{"name":"RemoteSignal","desc":" \\n\\nAn exported Luau type of a remote signal object.","lua_type":"Type","tags":["Luau Type"],"readonly":true,"source":{"line":22,"path":"src/Network/Server/RemoteSignal.lua"}}],"types":[{"name":"SignalConnection","desc":"","fields":[{"name":"Disconnect","lua_type":"() -> ()","desc":""},{"name":"Connected","lua_type":"boolean","desc":""}],"source":{"line":30,"path":"src/Network/Server/RemoteSignal.lua"}}],"name":"RemoteSignal","desc":"A remote signal in layman\'s terms is simply an object which dispatches data\\nto a client (who can listen to this data through a client remote signal) and \\nlistens to data dispatched to it self by a client (through a client remote signal).\\n\\n:::note\\n[Argument limitations](https://create.roblox.com/docs/scripting/events/argument-limitations-for-bindables-and-remotes)\\ndo apply since remote events are internally used by remote signals to dispatch data to clients.\\n:::","source":{"line":13,"path":"src/Network/Server/RemoteSignal.lua"}}')}}]);