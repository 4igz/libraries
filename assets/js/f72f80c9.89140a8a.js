"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4662],{76323:function(e){e.exports=JSON.parse('{"functions":[{"name":"SetInstanceProperties","desc":"Sets the properties of `instance` from the `properties` table.\\n\\n```lua\\nlocal InstanceUtil = require(...)\\n\\nInstanceUtil.SetInstanceProperties(workspace.Baseplate, {Transparency = 1})\\nprint(workspace.Baseplate.Transparency) --\x3e 1\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"properties","desc":"","lua_type":"{ [string]: any }"}],"returns":[],"function_type":"static","source":{"line":34,"path":"src/InstanceUtil/init.lua"}},{"name":"SetInstanceAttributes","desc":"Sets all the keys and values in `attributes` table as attributes of `instance`.\\n\\n```lua\\nlocal InstanceUtil = require(...)\\n\\nInstanceUtil.SetInstanceAttributes(workspace.Baseplate, {IsMayoSauce = true})\\nprint(workspace.Baseplate:GetAttribute(\\"IsMayoSauce\\")) --\x3e true\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attributes","desc":"","lua_type":"{ [string]: any }"}],"returns":[],"function_type":"static","source":{"line":51,"path":"src/InstanceUtil/init.lua"}},{"name":"SetInstancePhysicsCollisionGroup","desc":"Sets the collision group of `instance` to `collisionGroup`, if it is a [BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart). Else,all the descendants of `instance`\\n([BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart)\'s) will have their collision group set to `collisionGroup`.","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"collisionGroup","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":62,"path":"src/InstanceUtil/init.lua"}},{"name":"ResetInstancePhysicsCollisionGroup","desc":"Sets the collision group of `instance` to the default collision group i.e `\\"Default\\"`, if it is a [BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart). Else, all the descendants of `instance`\\n([BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart)\'s) will have their collision group set to `\\"Default\\"`.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"static","source":{"line":81,"path":"src/InstanceUtil/init.lua"}},{"name":"SetInstancePhysicalProperties","desc":"Sets the [PhysicalProperties](https://create.roblox.com/docs/reference/engine/datatypes/PhysicalProperties) of `instance` to match the `physicalProperties` table, if it is a [BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart). Else, all the descendants of `instance`\\n([BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart)\'s) will have their [PhysicalProperties](https://create.roblox.com/docs/reference/engine/datatypes/PhysicalProperties) set to match the `physicalProperties` table\\n\\n```lua\\nlocal physicalProperties = {\\n\\tDensity = 1\\n}\\n\\nInstanceUtil.SetInstancePhysicalProperties(workspace.Baseplate, physicalProperties)\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"physicalProperties","desc":"","lua_type":"{\\r\\n\\t\\tDensity: number?,\\r\\n\\t\\tFriction: number?,\\r\\n\\t\\tElasticity: number?,\\r\\n\\t\\tFrictionWeight: number?,\\r\\n\\t\\tElasticityWeight: number?,\\r\\n\\t}\\r\\n"}],"returns":[],"function_type":"static","source":{"line":108,"path":"src/InstanceUtil/init.lua"}},{"name":"ResetInstancePhysicalProperties","desc":"Sets the [PhysicalProperties](https://create.roblox.com/docs/reference/engine/datatypes/PhysicalProperties) of `instance` to the default, if it is a [BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart). Else, all the descendants of `instance`\\n([BasePart](https://create.roblox.com/docs/reference/engine/classes/BasePart)\'s) will have their [PhysicalProperties](https://create.roblox.com/docs/reference/engine/datatypes/PhysicalProperties) set to the default.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[],"function_type":"static","source":{"line":144,"path":"src/InstanceUtil/init.lua"}},{"name":"GetInstanceCorners","desc":"Returns a read only dictionary of all corners of `instance`, top and bottom.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{ Top: { Vector3 }, Bottom: { Vector3 } }\\r\\n"}],"function_type":"static","source":{"line":162,"path":"src/InstanceUtil/init.lua"}},{"name":"GetInstanceFloorMaterial","desc":"Returns the material the instance is lying on. \\n\\n- The 2nd argument can be passed as a [RaycastParams](https://create.roblox.com/docs/reference/engine/datatypes/RaycastParams) object,\\nwhich will be used in determining the material of `instance` through ray casting.\\n     \\n- The 3rd argument can be passed as a number (depth)\\nwhich will increase the length of the ray by `depth` studs (on the Y axis). This is only useful\\nwhen you want to add in more leeway in determining the material of `instance` **reliably**, since sometimes\\nthe instance may be very slightly over the top of some ground due to it\'s geometr so in those cases, the ray may not\\nregister properly. If this argument isn\'t specified, then it will default to `0.01`.","params":[{"name":"instance","desc":"","lua_type":"BasePart"},{"name":"raycastParams","desc":"","lua_type":"RaycastParams?"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"EnumItem\\r\\n"}],"function_type":"static","source":{"line":202,"path":"src/InstanceUtil/init.lua"}},{"name":"SetInstanceNetworkOwner","desc":"Sets the network owner of `instance` to `networkOwner` **safely**.\\n\\n:::tip\\nThis method will safely return `nil` instead of erroring, if the network ownership API can\'t be used on `instance`. Hence this\\nmethod should be preferred over directly setting the network owner of `instance` \\nvia [SetNetworkOwner](https://create.roblox.com/docs/reference/engine/classes/BasePart#SetNetworkOwner),\\n::: ","params":[{"name":"instance","desc":"","lua_type":"BasePart"},{"name":"networkOwner","desc":"","lua_type":"Player?"}],"returns":[],"function_type":"static","source":{"line":228,"path":"src/InstanceUtil/init.lua"}},{"name":"GetInstanceNetworkOwner","desc":"Returns the network owner of `instance` **safely**.\\n\\n:::tip\\nThis method will safely return `nil` instead of erroring, if the network ownership API can\'t be used on `instance` . Hence this\\nmethod should be preferred over directly getting the network owner of `instance` \\nvia [GetNetworkOwner](https://create.roblox.com/docs/reference/engine/classes/BasePart#GetNetworkOwner).\\n::: ","params":[{"name":"instance","desc":"","lua_type":"BasePart"}],"returns":[{"desc":"","lua_type":"Player?\\r\\n"}],"function_type":"static","source":{"line":246,"path":"src/InstanceUtil/init.lua"}}],"properties":[],"types":[],"name":"InstanceUtil","desc":" \\n\\nA utility module for working with instances.\\n \\n```lua\\nlocal InstanceUtil = require(...)\\n\\nInstanceUtil.SetInstanceAttributes(workspace.Baseplate, {IsCool = true})\\nprint(workspace.Baseplate:GetAttributes()) --\x3e {IsCool = true}\\n```","source":{"line":13,"path":"src/InstanceUtil/init.lua"}}')}}]);